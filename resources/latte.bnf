<program> = <ws> topdef*
<topdef> = <ws> fndef <ws> (*| clssdef*)
fndef = vtype <wp> ident <ws ob ws> args <ws cb ws> block
clssdef = noextclssdef | extclssdef
noextclssdef = <'class' wp> ident <ws '{' ws> clssdecls <ws '}'>
extclssdef = <'class' wp> ident <wp 'extends' wp> tident <ws '{' ws> clssdecls <'}'>
clssdecls = (clssdecl <ws> )*
<clssdecl> = decl | fndef
arg = type <wp> ident
args = epsilon | arg (<ws ',' ws> arg)*

block = <'{' ws> stmts <'}'>
<stmts> = (stmt <ws>)*
<stmt> = vret / ret / empty / cond / condelse / while / for / bstmt / decl / ass / incr / decr / sexp
empty = <';'>
<bstmt> = block
decl = type <wp> items <ws ';'>
<items> = item (<ws ',' ws> item)*
<item> = init | noinit
noinit = ident
init = ident <ws '=' ws> expr
ass = eident <ws '=' ws> expr <ws ';'>
incr = eident <ws '++' ws ';'>
decr = eident <ws '--' ws ';'>
ret = <'return' wp> expr <ws ';'>
vret = <'return' ws ';'>
cond = <'if' ws '(' ws> expr <ws ')' ws> stmt
condelse = <'if' ws '(' ws> expr <ws ')' ws> stmt <ws 'else' ws> stmt
while = <'while' ws '(' ws> expr <ws ')' ws> stmt
for = <'for' ws '(' ws> type <wp> ident <ws ':' ws> eident <ws ')' ws> stmt
sexp = expr <ws ';'>

<vtype> = type | void
<type> = int / string / bool / atype (*/ tident*)
tident = ident
atype = type <ws '[' ws ']'>
vident = ident
aident = eident <ws '[' ws> expr < ws ']'>
fident = eident <ws '.' ws> ident
<eident> = vident | aident | fident
int = <'int'>
string = <'string'>
bool = <'boolean'>
void = <'void'>

<expr> = exp0
<exprs> = (expr (<ws ',' ws> expr)*)?
<bexpr> = <ob ws> expr <ws cb>
<exp0> = eor | exp1 | bexpr
eor = exp1 <ws '||' ws> expr
<exp1> = eand | exp2 | bexpr
eand = exp2 <ws '&&' ws> exp1
<exp2> = erel | exp3 | bexpr
erel = exp2 <ws> relop <ws> exp3
<exp3> = eadd | exp4 | bexpr
eadd = exp3 <ws> addop <ws> exp4
<exp4> = emul | exp5 | bexpr
emul = exp4 <ws> mulop <ws> exp5
<exp5> = neg | not | exp6 | bexpr
neg = <'-' ws> exp6
not = <'!' ws> exp6
<exp6> = evar | elitint | elittrue | elitfalse | eapp | estring | bexpr | earrlit (*| eclassinit | eclassfield | etypednull | ethis*)
evar = eident
earrlit = <'new' wp> type <ws '[' ws> expr <ws ']'>
elitint = '-'? digit+
elittrue = <'true'>
elitfalse = <'false'>
etypednull = <ob ws> tident <cb ws 'null'>
eapp = ident <ws ob ws> exprs <ws cb>
ethis = <'this'>
<eclassfield> = fident | fapp
fapp = ident <ws '.' ws> eapp
estring = stringlit
eclassinit = <'new' wp> ident
ident = letter (letter | digit | '_' | "'")*
<digit> = #'[0-9]'
<letter> = #'[a-zA-Z]'
<char> =  #'[.]'
<stringlit> = <'"'> #'([^"\\]|(\\["\\nt]))*' <'"'>

<addop> = plus | minus
plus = <'+'>
minus = <'-'>
<mulop> = times | div | mod
times = <'*'>
div = <'/'>
mod = <'%'>
<relop> = lth | le | gth | ge | eq | ieq
lth = <'<'>
le = <'<='>
gth = <'>'>
ge = <'>='>
eq = <'=='>
ieq = <'!='>


wp = w+
ws = w*
w = #'\s+' | comment
comment = '/*' inside-comment* '*/' | ('#' | '//') #'.*' '\n'
inside-comment = !( '*/' | '/*') #'(.|\s)' | comment
ob = '('
cb = ')'
